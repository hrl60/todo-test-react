{"version":3,"sources":["logo.svg","stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoModel","store","title","completed","id","this","deleteTodo","observable","action","lastID","todos","push","filter","item","newMode","viewMode","length","computed","TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","todoStore","addTodo","setState","class","onChange","target","onKeyDown","placeholder","autofocus","Component","TodoItem","observer","onToggle","props","todo","toggle","onDestroy","delete","type","checked","onClick","TodoItems","items","map","Footer","itemsLeft","href","changeViewMode","clearCompleted","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8179a114.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { action, observable } from \"mobx\";\r\n\r\nexport default class TodoModel {\r\n  store;\r\n  id;\r\n  @observable title;\r\n  @observable completed;\r\n\r\n  constructor(store, title, completed, id) {\r\n    this.title = title;\r\n    this.completed = completed;\r\n    this.id = id;\r\n    this.store = store;\r\n  }\r\n  @action\r\n  toggle() {\r\n    this.completed = !this.completed;\r\n  }\r\n  delete(){\r\n    this.store.deleteTodo(this.id)\r\n  }\r\n}\r\n","import { observable, action, computed } from \"mobx\";\r\nimport TodoModel from \"./TodoModel\";\r\n\r\nclass TodoStore {\r\n  @observable todos = [];\r\n\r\n  lastID = 0;\r\n  @observable viewMode = \"all\";\r\n  @action\r\n  addTodo(title) {\r\n    this.todos.push(new TodoModel(this, title, false, this.lastID++));\r\n  }\r\n  @action\r\n  deleteTodo(id) {\r\n    this.todos = this.todos.filter(item => {\r\n      return item.id != id;\r\n    });\r\n  }\r\n  @action\r\n  clearCompleted(id) {\r\n    this.todos = this.todos.filter(item => {\r\n      return item.completed == false;\r\n    });\r\n  }\r\n  @action\r\n  changeViewMode(newMode) {\r\n    this.viewMode = newMode;\r\n  }\r\n  @computed\r\n  get itemsLeft() {\r\n    return this.todos.filter(item => !item.completed).length;\r\n  }\r\n  @computed\r\n  get items() {\r\n    switch (this.viewMode) {\r\n      case \"all\":\r\n        return this.todos;\r\n        break;\r\n      case \"completed\":\r\n        return this.todos.filter(item => item.completed);\r\n        break;\r\n      default:\r\n        return this.todos.filter(item => !item.completed);\r\n    }\r\n  }\r\n}\r\nconst store = new TodoStore();\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from '../stores/TodoStore'\r\nclass TodoEntry extends Component {\r\n  state = {\r\n    value: \"\"\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header class=\"header\">\r\n          <h1>todos</h1>\r\n          <input\r\n          value={this.state.value}\r\n            onChange={event => this.setState({ value: event.target.value })}\r\n            onKeyDown={event=>this.handleKeyDown(event)}\r\n            class=\"new-todo\"\r\n            placeholder=\"What needs to be done?\"\r\n            autofocus\r\n          />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n  handleKeyDown=(event)=>{\r\n    if(event.keyCode!==13){\r\n      return;\r\n    }\r\n    event.preventDefault()\r\ntodoStore.addTodo(this.state.value)\r\nthis.setState({\r\n  value:\"\"\r\n})\r\n  }\r\n}\r\nexport default TodoEntry;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\n@observer\r\nclass TodoItem extends Component {\r\n  onToggle=()=>{\r\n    this.props.todo.toggle()\r\n  }\r\n  onDestroy=()=>{\r\n    this.props.todo.delete()\r\n  }\r\n  render() {\r\n    const { todo } = this.props;\r\n    return (\r\n      <div>\r\n        <li class={todo.completed ? \"completed\" : \" \"}>\r\n          <div class=\"view\">\r\n            <input class=\"toggle\" type=\"checkbox\" checked={todo.completed} onChange={this.onToggle} />\r\n            <label>{todo.title}</label>\r\n            <button class=\"destroy\" onClick={this.onDestroy}></button>\r\n          </div>\r\n          <input class=\"edit\" value=\"Create a TodoMVC template\" />\r\n        </li>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <section class=\"main\">\r\n          <ul class=\"todo-list\">\r\n            {todoStore.items.map(todo => {\r\n              return <TodoItem todo={todo} />;\r\n            })}\r\n          </ul>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default TodoItems;\r\n","import React, { Component } from \"react\";\r\nimport todoStore from \"../stores/TodoStore\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer class=\"footer\">\r\n        <span class=\"todo-count\">\r\n          <strong>{todoStore.itemsLeft}</strong> item left\r\n        </span>\r\n        <ul class=\"filters\">\r\n          <li>\r\n            <a\r\n              class={todoStore.viewMode == \"all\" ? \"selected\" : \" \"}\r\n              href=\"#/\"\r\n              onClick={() => todoStore.changeViewMode(\"all\")}\r\n            >\r\n              All\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              href=\"#/active\"\r\n              class={todoStore.viewMode == \"active\" ? \"selected\" : \" \"}\r\n              onClick={() => todoStore.changeViewMode(\"active\")}\r\n            >\r\n              Active\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              href=\"#/completed\"\r\n              class={todoStore.viewMode == \"completed\" ? \"selected\" : \" \"}\r\n              onClick={() => todoStore.changeViewMode(\"completed\")}\r\n            >\r\n              Completed\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <button class=\"clear-completed\" onClick={()=>todoStore.clearCompleted()}>Clear completed</button>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\nexport default Footer;\r\n","import React from \"react\";\nimport TodoEntry from \"./components/TodoEntry\";\nimport TodoItems from \"./components/TodoItems\";\nimport Footer from \"./components/Footer\"\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div id=\"todoapp\" className=\"todoapp\">\n      <TodoEntry />\n      <TodoItems />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}